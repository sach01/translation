# Generated by Django 5.1.1 on 2024-10-05 20:17

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('translation_app', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the badge (e.g., 'Top Contributor')", max_length=100)),
                ('description', models.TextField(help_text='Description of what the badge is awarded for')),
                ('icon', models.ImageField(blank=True, help_text='Icon representing the badge', null=True, upload_to='badges/')),
            ],
        ),
        migrations.CreateModel(
            name='Numbers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField()),
                ('in_borana', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='PartOfSpeech',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.RemoveField(
            model_name='chapter',
            name='book',
        ),
        migrations.RemoveField(
            model_name='verse',
            name='chapter',
        ),
        migrations.RemoveField(
            model_name='parallelverse',
            name='borana_verse',
        ),
        migrations.RemoveField(
            model_name='parallelverse',
            name='english_verse',
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_name', models.CharField(help_text="Name of the achievement (e.g., 'Top Contributor')", max_length=100)),
                ('description', models.TextField(help_text="Description of the achievement (e.g., 'Contributed 100 vocabulary words')")),
                ('date_achieved', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Dialect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dialects', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='GrammarStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_sentence', models.TextField(help_text="Enter the sentence in Borana (e.g., 'Ani si argaa' for 'I see you').")),
                ('target_sentence', models.TextField(help_text="Enter the translated sentence in English (e.g., 'I see you' for 'Ani si argaa').")),
                ('grammatical_structure', models.CharField(help_text="Describe the grammatical structure (e.g., 'SVO' for Subject-Verb-Object).", max_length=100)),
                ('tense', models.CharField(blank=True, help_text="Specify the tense (e.g., 'Present', 'Past', 'Future').", max_length=50, null=True)),
                ('pronouns_used', models.CharField(blank=True, help_text="List the pronouns used in the sentence (e.g., 'Ani' for 'I').", max_length=100, null=True)),
                ('negation', models.BooleanField(default=False, help_text="Check this box if the sentence includes negation (e.g., 'Ani hin dhufne' for 'I did not come').")),
                ('source_language', models.ForeignKey(help_text='Select the source language (e.g., Borana)', on_delete=django.db.models.deletion.CASCADE, related_name='source_grammar', to='translation_app.language')),
                ('target_language', models.ForeignKey(help_text='Select the target language (e.g., English)', on_delete=django.db.models.deletion.CASCADE, related_name='target_grammar', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='LanguageStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word_order', models.CharField(help_text="Describe the word order (e.g., 'SVO', 'VSO', 'SOV')", max_length=100)),
                ('phonology', models.TextField(help_text='Describe the sound rules and pronunciation guidelines.')),
                ('morphology', models.TextField(help_text='Describe the rules for word formation, including inflections, prefixes, and suffixes.')),
                ('syntax', models.TextField(help_text='Describe how words and phrases are arranged to create sentences.')),
                ('semantics', models.TextField(help_text='Describe the overarching structure of meaning in the language.')),
                ('writing_system', models.TextField(help_text='Describe the punctuation and writing system rules.')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='language_structures', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('rank', models.IntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Moderation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('review_notes', models.TextField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('contributor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='moderated_contributions', to=settings.AUTH_USER_MODEL)),
                ('moderator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NamedEntity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Enter the proper noun (e.g., 'Finfinnee' for 'Addis Ababa').", max_length=255)),
                ('entity_type', models.CharField(help_text="Specify the type of entity (e.g., 'City', 'Organization', 'Person').", max_length=50)),
                ('target_translation', models.CharField(blank=True, help_text="Enter the translation or equivalent name in the target language (e.g., 'Addis Ababa' for 'Finfinnee').", max_length=255, null=True)),
                ('source_language', models.ForeignKey(help_text='Select the language of the entity name (e.g., Borana)', on_delete=django.db.models.deletion.CASCADE, related_name='named_entities', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='Phrase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phrase', models.CharField(help_text="Enter the idiom or phrase in Borana (e.g., 'Biyyee nyaadhu' for 'Eat dirt').", max_length=255)),
                ('target_translation', models.TextField(help_text="Enter the translated idiom or phrase in English (e.g., 'Swallow your pride' for 'Biyyee nyaadhu').")),
                ('literal_translation', models.TextField(help_text="Provide the literal translation (e.g., 'Eat dirt' for 'Biyyee nyaadhu').")),
                ('cultural_meaning', models.TextField(help_text="Describe the cultural meaning of the idiom (e.g., 'Show humility' for 'Biyyee nyaadhu').")),
                ('is_idiomatic', models.BooleanField(default=False, help_text='Check this box if the phrase is an idiom.')),
                ('source_language', models.ForeignKey(help_text='Select the source language (e.g., Borana)', on_delete=django.db.models.deletion.CASCADE, related_name='phrases', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='Progress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vocabulary_contributions', models.IntegerField(default=0, help_text='Track number of vocabulary words contributed')),
                ('feedback_provided', models.IntegerField(default=0, help_text='Track number of feedback instances provided')),
                ('synonyms_added', models.IntegerField(default=0, help_text='Track number of synonyms contributed')),
                ('antonyms_added', models.IntegerField(default=0, help_text='Track number of antonyms contributed')),
                ('phrases_contributed', models.IntegerField(default=0, help_text='Track number of phrases contributed')),
                ('named_entities_contributed', models.IntegerField(default=0, help_text='Track number of named entities contributed')),
                ('sentences_aligned', models.IntegerField(default=0, help_text='Track number of sentence alignments')),
                ('grammar_structures_contributed', models.IntegerField(default=0, help_text='Track number of grammar structures contributed')),
                ('language_structures_contributed', models.IntegerField(default=0, help_text='Track number of language structures contributed')),
                ('translation_memory_contributions', models.IntegerField(default=0, help_text='Track number of translation memory entries')),
                ('translation_errors_logged', models.IntegerField(default=0, help_text='Track number of translation errors logged')),
                ('morphology_contributed', models.IntegerField(default=0, help_text='Track number of morphology contributions')),
                ('training_data_submitted', models.IntegerField(default=0, help_text='Track number of training data sentences submitted')),
                ('points_earned', models.IntegerField(default=0, help_text='Track total points earned from all contributions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField(default=0)),
                ('level', models.IntegerField(default=1)),
                ('badge', models.CharField(blank=True, max_length=100)),
                ('date_earned', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SentenceAlignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_corpus', models.CharField(blank=True, help_text="Specify the type of corpus (e.g., 'Conversation', 'Bible', 'Folklore').", max_length=100, null=True)),
                ('source_sentence', models.TextField(help_text="Enter the sentence in the source language (e.g., 'Wo'ee haa' for 'How are you?').")),
                ('target_sentence', models.TextField(help_text="Enter the corresponding sentence in the target language (e.g., 'How are you?' for 'Wo'ee haa').")),
                ('target_corpus', models.CharField(blank=True, help_text="Specify the type of corpus for the target sentence (e.g., 'Conversation', 'Bible').", max_length=100, null=True)),
                ('alignment_score', models.FloatField(default=1.0, help_text='Optional: Rate the quality of alignment between the sentences (1.0 means perfect alignment).')),
                ('source_language', models.ForeignKey(help_text='Select the source language (e.g., Borana)', on_delete=django.db.models.deletion.CASCADE, related_name='source_sentences', to='translation_app.language')),
                ('target_language', models.ForeignKey(help_text='Select the target language (e.g., English)', on_delete=django.db.models.deletion.CASCADE, related_name='target_sentences', to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='TrainingData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentence', models.TextField()),
                ('translation', models.TextField()),
                ('feedback_score', models.FloatField()),
                ('date_used', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='translation_app.language')),
            ],
        ),
        migrations.CreateModel(
            name='TranslationError',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_sentence', models.TextField()),
                ('error_description', models.TextField()),
                ('correction', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(default='reported', max_length=20)),
                ('priority_level', models.IntegerField(default=1)),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='translation_app_users', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='translation_app_users', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TranslationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_feedback', models.TextField(help_text="Provide feedback on the accuracy of the translation (e.g., 'The translation is correct' or 'The verb is incorrect').")),
                ('accuracy_rating', models.IntegerField(help_text='Rate the accuracy from 1 (poor) to 5 (excellent).')),
                ('correction_suggestion', models.TextField(blank=True, help_text="Provide any suggestions for correcting the translation (e.g., 'Change the verb to the past tense').", null=True)),
                ('sentence_alignment', models.ForeignKey(help_text='Select the sentence alignment you are giving feedback on.', on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='translation_app.sentencealignment')),
                ('reported_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_feedback', to='translation_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='SentenceAlignmentFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_text', models.TextField(blank=True, null=True)),
                ('is_correct_alignment', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sentence_alignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentence_alignment', to='translation_app.sentencealignment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='translation_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, help_text="User's bio or description")),
                ('avatar', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='avatars/')),
                ('points', models.IntegerField(default=0, help_text='Total points accumulated by the user')),
                ('level', models.IntegerField(default=1, help_text="User's level based on activity")),
                ('badges', models.ManyToManyField(blank=True, help_text='Special badges earned by the user', related_name='profiles', to='translation_app.badge')),
                ('progress', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='translation_app.progress')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vocabulary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_word', models.CharField(max_length=100)),
                ('source_meaning', models.TextField(blank=True)),
                ('target_word', models.CharField(max_length=100)),
                ('target_meaning', models.TextField(blank=True)),
                ('phonetic_translation', models.CharField(max_length=100)),
                ('base_form', models.CharField(max_length=100)),
                ('past_form', models.CharField(blank=True, max_length=100)),
                ('future_form', models.CharField(blank=True, max_length=100)),
                ('plural_form', models.CharField(blank=True, max_length=100)),
                ('example_sentence_source_present', models.TextField(blank=True)),
                ('example_sentence_source_past', models.TextField(blank=True)),
                ('example_sentence_source_future', models.TextField(blank=True)),
                ('example_sentence_target_present', models.TextField(blank=True)),
                ('example_sentence_target_past', models.TextField(blank=True)),
                ('example_sentence_target_future', models.TextField(blank=True)),
                ('definition', models.TextField()),
                ('usage_notes', models.TextField(blank=True)),
                ('cultural_context', models.TextField(blank=True)),
                ('audio_pronunciation', models.FileField(blank=True, upload_to='pronunciations/')),
                ('dialect', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vocabularies', to='translation_app.dialect')),
                ('part_of_speech', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabularies', to='translation_app.partofspeech')),
                ('source_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_vocabularies', to='translation_app.language')),
                ('target_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_vocabularies', to='translation_app.language')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vocabularies', to='translation_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='TranslationMemory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation', models.CharField(max_length=255)),
                ('source_meaning', models.TextField(blank=True)),
                ('target_meaning', models.TextField(blank=True)),
                ('usage_frequency', models.IntegerField(default=1)),
                ('confidence_score', models.FloatField(default=1.0)),
                ('last_used', models.DateTimeField(auto_now=True)),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translation_memory', to='translation_app.vocabulary')),
            ],
        ),
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synonym_word', models.CharField(max_length=100)),
                ('synonym_meaning', models.TextField(blank=True)),
                ('synonym_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='translation_app.language')),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms', to='translation_app.vocabulary')),
            ],
        ),
        migrations.CreateModel(
            name='Morphology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plural_form', models.CharField(help_text='Enter the plural form of the word, if applicable.', max_length=100)),
                ('conjugated_forms', models.JSONField(help_text='Provide conjugated forms of the verb or other inflected forms (e.g., past, present, future).')),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='morphology', to='translation_app.vocabulary')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_feedback', models.TextField()),
                ('accuracy_rating', models.IntegerField()),
                ('needs_correction', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='translation_app.user')),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='translation_app.vocabulary')),
            ],
        ),
        migrations.CreateModel(
            name='Antonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('antonym_word', models.CharField(max_length=100)),
                ('antonym_meaning', models.TextField(blank=True)),
                ('antonym_language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='translation_app.language')),
                ('vocabulary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='antonyms', to='translation_app.vocabulary')),
            ],
        ),
        migrations.DeleteModel(
            name='Book',
        ),
        migrations.DeleteModel(
            name='Chapter',
        ),
        migrations.DeleteModel(
            name='ParallelVerse',
        ),
        migrations.DeleteModel(
            name='Verse',
        ),
    ]
